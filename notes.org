* DATABASE
1. Add JwtStore: db.Tokens
- [X] implement token storage in db.Users
- [X] implement storage in db.Tokens
- [X] impl getToken from id

2. Implement user updating
- [X] updateUserDB(id, email, password)
  - [X] create new RegisteredUser struct
    - [X] hash new password
  - [X] db.Users[id] = newRegisteredUserDetails
  - [X] return new user struct

* AUTHENTICATION LOGIC
- [X] create jwtSecret
- [X] retrieve with dotenv

* LOGIN ENDPOINT
- [X] create jwt token/signed string
- [X] store jwt token in db
- [X] return jwt token in response


* UPDATEUSER ENDPOINT
- [X] extract token from request headers
- [X] check that jwt token is valid by parsing
- [X] check that jwt token hasn't expired
- [X] update database
- [X] return user+200



REGISTER: POST /users/
request = email + password
response = email + id


LOGIN: POST /login/
request = email + password + ?expires
response = email + id + jwt


UPDATE: PUT /users/
request = email + password
json to include Auth header:
Authorization: Bearer <token>



